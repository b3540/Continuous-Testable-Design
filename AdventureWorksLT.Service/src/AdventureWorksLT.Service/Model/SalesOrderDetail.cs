/* 
 * AdventureWorksLT
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
// ReSharper disable InheritdocConsiderUsage
// ReSharper disable CompareOfFloatsByEqualityOperator
// ReSharper disable NonReadonlyMemberInGetHashCode
// ReSharper disable UnusedMember.Global

namespace AdventureWorksLT.Service.Model
{
    /// <summary>
    /// SalesOrderDetail
    /// </summary>
    [DataContract]
    public class SalesOrderDetail :  IEquatable<SalesOrderDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrderDetail" /> class.
        /// </summary>
        /// <param name="salesOrderId">SalesOrderID.</param>
        /// <param name="salesOrderDetailId">SalesOrderDetailID.</param>
        /// <param name="orderQty">OrderQty.</param>
        /// <param name="productId">ProductID.</param>
        /// <param name="unitPrice">UnitPrice.</param>
        /// <param name="unitPriceDiscount">UnitPriceDiscount.</param>
        /// <param name="lineTotal">LineTotal.</param>
        /// <param name="rowguid">Rowguid.</param>
        /// <param name="modifiedDate">ModifiedDate.</param>
        public SalesOrderDetail(int? salesOrderId = default(int?), int? salesOrderDetailId = default(int?), int? orderQty = default(int?), int productId = default(int), double? unitPrice = default(double?), double? unitPriceDiscount = default(double?), double lineTotal = default(double), Guid? rowguid = default(Guid?), DateTime? modifiedDate = default(DateTime?))
        {
            SalesOrderId = salesOrderId;
            SalesOrderDetailId = salesOrderDetailId;
            OrderQty = orderQty;
            ProductId = productId;
            UnitPrice = unitPrice;
            UnitPriceDiscount = unitPriceDiscount;
            LineTotal = lineTotal;
            Rowguid = rowguid;
            ModifiedDate = modifiedDate;
        }
        
        /// <summary>
        /// Gets or Sets SalesOrderID
        /// </summary>
        [DataMember(Name="SalesOrderID", EmitDefaultValue=false)]
        public int? SalesOrderId { get; set; }

        /// <summary>
        /// Gets or Sets SalesOrderDetailID
        /// </summary>
        [DataMember(Name="SalesOrderDetailID", EmitDefaultValue=false)]
        public int? SalesOrderDetailId { get; set; }

        /// <summary>
        /// Gets or Sets OrderQty
        /// </summary>
        [DataMember(Name="OrderQty", EmitDefaultValue=false)]
        public int? OrderQty { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="ProductID", EmitDefaultValue=false)]
        public int ProductId { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="UnitPrice", EmitDefaultValue=false)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets UnitPriceDiscount
        /// </summary>
        [DataMember(Name="UnitPriceDiscount", EmitDefaultValue=false)]
        public double? UnitPriceDiscount { get; set; }

        /// <summary>
        /// Gets or Sets LineTotal
        /// </summary>
        [DataMember(Name="LineTotal", EmitDefaultValue=false)]
        public double LineTotal { get; set; }

        /// <summary>
        /// Gets or Sets Rowguid
        /// </summary>
        [DataMember(Name="rowguid", EmitDefaultValue=false)]
        public Guid? Rowguid { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="ModifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesOrderDetail {\n");
            sb.Append("  SalesOrderID: ").Append(SalesOrderId).Append("\n");
            sb.Append("  SalesOrderDetailID: ").Append(SalesOrderDetailId).Append("\n");
            sb.Append("  OrderQty: ").Append(OrderQty).Append("\n");
            sb.Append("  ProductID: ").Append(ProductId).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  UnitPriceDiscount: ").Append(UnitPriceDiscount).Append("\n");
            sb.Append("  LineTotal: ").Append(LineTotal).Append("\n");
            sb.Append("  Rowguid: ").Append(Rowguid).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SalesOrderDetail);
        }

        /// <summary>
        /// Returns true if SalesOrderDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesOrderDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesOrderDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    SalesOrderId == input.SalesOrderId ||
                    SalesOrderId != null &&
                    SalesOrderId.Equals(input.SalesOrderId)
                ) && 
                (
                    SalesOrderDetailId == input.SalesOrderDetailId ||
                    SalesOrderDetailId != null &&
                    SalesOrderDetailId.Equals(input.SalesOrderDetailId)
                ) && 
                (
                    OrderQty == input.OrderQty ||
                    OrderQty != null &&
                    OrderQty.Equals(input.OrderQty)
                ) && 
                (
                    ProductId == input.ProductId ||
                    ProductId.Equals(input.ProductId)
                ) && 
                (
                    UnitPrice == input.UnitPrice ||
                    UnitPrice != null &&
                    UnitPrice.Equals(input.UnitPrice)
                ) && 
                (
                    UnitPriceDiscount == input.UnitPriceDiscount ||
                    UnitPriceDiscount != null &&
                    UnitPriceDiscount.Equals(input.UnitPriceDiscount)
                ) && 
                (
                    LineTotal == input.LineTotal ||
                    LineTotal.Equals(input.LineTotal)
                ) && 
                (
                    Rowguid == input.Rowguid ||
                    Rowguid != null &&
                    Rowguid.Equals(input.Rowguid)
                ) && 
                (
                    ModifiedDate == input.ModifiedDate ||
                    ModifiedDate != null &&
                    ModifiedDate.Equals(input.ModifiedDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (SalesOrderId != null)
                    hashCode = hashCode * 59 + SalesOrderId.GetHashCode();
                if (SalesOrderDetailId != null)
                    hashCode = hashCode * 59 + SalesOrderDetailId.GetHashCode();
                if (OrderQty != null)
                    hashCode = hashCode * 59 + OrderQty.GetHashCode();
                hashCode = hashCode * 59 + ProductId.GetHashCode();
                if (UnitPrice != null)
                    hashCode = hashCode * 59 + UnitPrice.GetHashCode();
                if (UnitPriceDiscount != null)
                    hashCode = hashCode * 59 + UnitPriceDiscount.GetHashCode();
                hashCode = hashCode * 59 + LineTotal.GetHashCode();
                if (Rowguid != null)
                    hashCode = hashCode * 59 + Rowguid.GetHashCode();
                if (ModifiedDate != null)
                    hashCode = hashCode * 59 + ModifiedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
