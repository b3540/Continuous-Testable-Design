/* 
 * AdventureWorksLT
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdventureWorksLT.Service.Client.SwaggerDateConverter;

namespace AdventureWorksLT.Service.Model
{
    /// <summary>
    /// SalesOrderDetail
    /// </summary>
    [DataContract]
    public partial class SalesOrderDetail :  IEquatable<SalesOrderDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalesOrderDetail" /> class.
        /// </summary>
        /// <param name="SalesOrderID">SalesOrderID.</param>
        /// <param name="SalesOrderDetailID">SalesOrderDetailID.</param>
        /// <param name="OrderQty">OrderQty.</param>
        /// <param name="ProductID">ProductID.</param>
        /// <param name="UnitPrice">UnitPrice.</param>
        /// <param name="UnitPriceDiscount">UnitPriceDiscount.</param>
        /// <param name="LineTotal">LineTotal.</param>
        /// <param name="Rowguid">Rowguid.</param>
        /// <param name="ModifiedDate">ModifiedDate.</param>
        public SalesOrderDetail(int? SalesOrderID = default(int?), int? SalesOrderDetailID = default(int?), int? OrderQty = default(int?), int? ProductID = default(int?), double? UnitPrice = default(double?), double? UnitPriceDiscount = default(double?), double? LineTotal = default(double?), Guid? Rowguid = default(Guid?), DateTime? ModifiedDate = default(DateTime?))
        {
            this.SalesOrderID = SalesOrderID;
            this.SalesOrderDetailID = SalesOrderDetailID;
            this.OrderQty = OrderQty;
            this.ProductID = ProductID;
            this.UnitPrice = UnitPrice;
            this.UnitPriceDiscount = UnitPriceDiscount;
            this.LineTotal = LineTotal;
            this.Rowguid = Rowguid;
            this.ModifiedDate = ModifiedDate;
        }
        
        /// <summary>
        /// Gets or Sets SalesOrderID
        /// </summary>
        [DataMember(Name="SalesOrderID", EmitDefaultValue=false)]
        public int? SalesOrderID { get; set; }

        /// <summary>
        /// Gets or Sets SalesOrderDetailID
        /// </summary>
        [DataMember(Name="SalesOrderDetailID", EmitDefaultValue=false)]
        public int? SalesOrderDetailID { get; set; }

        /// <summary>
        /// Gets or Sets OrderQty
        /// </summary>
        [DataMember(Name="OrderQty", EmitDefaultValue=false)]
        public int? OrderQty { get; set; }

        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="ProductID", EmitDefaultValue=false)]
        public int? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets UnitPrice
        /// </summary>
        [DataMember(Name="UnitPrice", EmitDefaultValue=false)]
        public double? UnitPrice { get; set; }

        /// <summary>
        /// Gets or Sets UnitPriceDiscount
        /// </summary>
        [DataMember(Name="UnitPriceDiscount", EmitDefaultValue=false)]
        public double? UnitPriceDiscount { get; set; }

        /// <summary>
        /// Gets or Sets LineTotal
        /// </summary>
        [DataMember(Name="LineTotal", EmitDefaultValue=false)]
        public double? LineTotal { get; set; }

        /// <summary>
        /// Gets or Sets Rowguid
        /// </summary>
        [DataMember(Name="rowguid", EmitDefaultValue=false)]
        public Guid? Rowguid { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="ModifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesOrderDetail {\n");
            sb.Append("  SalesOrderID: ").Append(SalesOrderID).Append("\n");
            sb.Append("  SalesOrderDetailID: ").Append(SalesOrderDetailID).Append("\n");
            sb.Append("  OrderQty: ").Append(OrderQty).Append("\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  UnitPrice: ").Append(UnitPrice).Append("\n");
            sb.Append("  UnitPriceDiscount: ").Append(UnitPriceDiscount).Append("\n");
            sb.Append("  LineTotal: ").Append(LineTotal).Append("\n");
            sb.Append("  Rowguid: ").Append(Rowguid).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalesOrderDetail);
        }

        /// <summary>
        /// Returns true if SalesOrderDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of SalesOrderDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesOrderDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SalesOrderID == input.SalesOrderID ||
                    (this.SalesOrderID != null &&
                    this.SalesOrderID.Equals(input.SalesOrderID))
                ) && 
                (
                    this.SalesOrderDetailID == input.SalesOrderDetailID ||
                    (this.SalesOrderDetailID != null &&
                    this.SalesOrderDetailID.Equals(input.SalesOrderDetailID))
                ) && 
                (
                    this.OrderQty == input.OrderQty ||
                    (this.OrderQty != null &&
                    this.OrderQty.Equals(input.OrderQty))
                ) && 
                (
                    this.ProductID == input.ProductID ||
                    (this.ProductID != null &&
                    this.ProductID.Equals(input.ProductID))
                ) && 
                (
                    this.UnitPrice == input.UnitPrice ||
                    (this.UnitPrice != null &&
                    this.UnitPrice.Equals(input.UnitPrice))
                ) && 
                (
                    this.UnitPriceDiscount == input.UnitPriceDiscount ||
                    (this.UnitPriceDiscount != null &&
                    this.UnitPriceDiscount.Equals(input.UnitPriceDiscount))
                ) && 
                (
                    this.LineTotal == input.LineTotal ||
                    (this.LineTotal != null &&
                    this.LineTotal.Equals(input.LineTotal))
                ) && 
                (
                    this.Rowguid == input.Rowguid ||
                    (this.Rowguid != null &&
                    this.Rowguid.Equals(input.Rowguid))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SalesOrderID != null)
                    hashCode = hashCode * 59 + this.SalesOrderID.GetHashCode();
                if (this.SalesOrderDetailID != null)
                    hashCode = hashCode * 59 + this.SalesOrderDetailID.GetHashCode();
                if (this.OrderQty != null)
                    hashCode = hashCode * 59 + this.OrderQty.GetHashCode();
                if (this.ProductID != null)
                    hashCode = hashCode * 59 + this.ProductID.GetHashCode();
                if (this.UnitPrice != null)
                    hashCode = hashCode * 59 + this.UnitPrice.GetHashCode();
                if (this.UnitPriceDiscount != null)
                    hashCode = hashCode * 59 + this.UnitPriceDiscount.GetHashCode();
                if (this.LineTotal != null)
                    hashCode = hashCode * 59 + this.LineTotal.GetHashCode();
                if (this.Rowguid != null)
                    hashCode = hashCode * 59 + this.Rowguid.GetHashCode();
                if (this.ModifiedDate != null)
                    hashCode = hashCode * 59 + this.ModifiedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
