/* 
 * AdventureWorksLT
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
// ReSharper disable InheritdocConsiderUsage
// ReSharper disable CompareOfFloatsByEqualityOperator
// ReSharper disable NonReadonlyMemberInGetHashCode
// ReSharper disable UnusedMember.Global

namespace AdventureWorksLT.Service.Model
{
    /// <summary>
    /// Product
    /// </summary>
    [DataContract]
    public class Product :  IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="productId">ProductID.</param>
        /// <param name="name">Name.</param>
        /// <param name="productNumber">ProductNumber.</param>
        /// <param name="color">Color.</param>
        /// <param name="standardCost">StandardCost.</param>
        /// <param name="listPrice">ListPrice.</param>
        /// <param name="size">Size.</param>
        /// <param name="weight">Weight.</param>
        /// <param name="productCategoryId">ProductCategoryID.</param>
        /// <param name="productModelId">ProductModelID.</param>
        /// <param name="sellStartDate">SellStartDate.</param>
        /// <param name="sellEndDate">SellEndDate.</param>
        /// <param name="discontinuedDate">DiscontinuedDate.</param>
        /// <param name="thumbNailPhoto">ThumbNailPhoto.</param>
        /// <param name="thumbnailPhotoFileName">ThumbnailPhotoFileName.</param>
        /// <param name="rowguid">Rowguid.</param>
        /// <param name="modifiedDate">ModifiedDate.</param>
        public Product(int productId = default(int), string name = default(string), string productNumber = default(string), string color = default(string), double? standardCost = default(double?), double? listPrice = default(double?), string size = default(string), double? weight = default(double?), int? productCategoryId = default(int?), int? productModelId = default(int?), DateTime? sellStartDate = default(DateTime?), DateTime? sellEndDate = default(DateTime?), DateTime? discontinuedDate = default(DateTime?), byte[] thumbNailPhoto = default(byte[]), string thumbnailPhotoFileName = default(string), Guid? rowguid = default(Guid?), DateTime? modifiedDate = default(DateTime?))
        {
            ProductId = productId;
            Name = name;
            ProductNumber = productNumber;
            Color = color;
            StandardCost = standardCost;
            ListPrice = listPrice;
            Size = size;
            Weight = weight;
            ProductCategoryId = productCategoryId;
            ProductModelId = productModelId;
            SellStartDate = sellStartDate;
            SellEndDate = sellEndDate;
            DiscontinuedDate = discontinuedDate;
            ThumbNailPhoto = thumbNailPhoto;
            ThumbnailPhotoFileName = thumbnailPhotoFileName;
            Rowguid = rowguid;
            ModifiedDate = modifiedDate;
        }
        
        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="ProductID", EmitDefaultValue=false)]
        public int ProductId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProductNumber
        /// </summary>
        [DataMember(Name="ProductNumber", EmitDefaultValue=false)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="Color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets StandardCost
        /// </summary>
        [DataMember(Name="StandardCost", EmitDefaultValue=false)]
        public double? StandardCost { get; set; }

        /// <summary>
        /// Gets or Sets ListPrice
        /// </summary>
        [DataMember(Name="ListPrice", EmitDefaultValue=false)]
        public double? ListPrice { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="Size", EmitDefaultValue=false)]
        public string Size { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="Weight", EmitDefaultValue=false)]
        public double? Weight { get; set; }

        /// <summary>
        /// Gets or Sets ProductCategoryID
        /// </summary>
        [DataMember(Name="ProductCategoryID", EmitDefaultValue=false)]
        public int? ProductCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets ProductModelID
        /// </summary>
        [DataMember(Name="ProductModelID", EmitDefaultValue=false)]
        public int? ProductModelId { get; set; }

        /// <summary>
        /// Gets or Sets SellStartDate
        /// </summary>
        [DataMember(Name="SellStartDate", EmitDefaultValue=false)]
        public DateTime? SellStartDate { get; set; }

        /// <summary>
        /// Gets or Sets SellEndDate
        /// </summary>
        [DataMember(Name="SellEndDate", EmitDefaultValue=false)]
        public DateTime? SellEndDate { get; set; }

        /// <summary>
        /// Gets or Sets DiscontinuedDate
        /// </summary>
        [DataMember(Name="DiscontinuedDate", EmitDefaultValue=false)]
        public DateTime? DiscontinuedDate { get; set; }

        /// <summary>
        /// Gets or Sets ThumbNailPhoto
        /// </summary>
        [DataMember(Name="ThumbNailPhoto", EmitDefaultValue=false)]
        public byte[] ThumbNailPhoto { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailPhotoFileName
        /// </summary>
        [DataMember(Name="ThumbnailPhotoFileName", EmitDefaultValue=false)]
        public string ThumbnailPhotoFileName { get; set; }

        /// <summary>
        /// Gets or Sets Rowguid
        /// </summary>
        [DataMember(Name="rowguid", EmitDefaultValue=false)]
        public Guid? Rowguid { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="ModifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  ProductID: ").Append(ProductId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProductNumber: ").Append(ProductNumber).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  StandardCost: ").Append(StandardCost).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  ProductCategoryID: ").Append(ProductCategoryId).Append("\n");
            sb.Append("  ProductModelID: ").Append(ProductModelId).Append("\n");
            sb.Append("  SellStartDate: ").Append(SellStartDate).Append("\n");
            sb.Append("  SellEndDate: ").Append(SellEndDate).Append("\n");
            sb.Append("  DiscontinuedDate: ").Append(DiscontinuedDate).Append("\n");
            sb.Append("  ThumbNailPhoto: ").Append(ThumbNailPhoto).Append("\n");
            sb.Append("  ThumbnailPhotoFileName: ").Append(ThumbnailPhotoFileName).Append("\n");
            sb.Append("  Rowguid: ").Append(Rowguid).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
                return false;

            return 
                (
                    ProductId == input.ProductId ||
                    ProductId.Equals(input.ProductId)
                ) && 
                (
                    Name == input.Name ||
                    Name != null &&
                    Name.Equals(input.Name)
                ) && 
                (
                    ProductNumber == input.ProductNumber ||
                    ProductNumber != null &&
                    ProductNumber.Equals(input.ProductNumber)
                ) && 
                (
                    Color == input.Color ||
                    Color != null &&
                    Color.Equals(input.Color)
                ) && 
                (
                    StandardCost == input.StandardCost ||
                    StandardCost != null &&
                    StandardCost.Equals(input.StandardCost)
                ) && 
                (
                    ListPrice == input.ListPrice ||
                    ListPrice != null &&
                    ListPrice.Equals(input.ListPrice)
                ) && 
                (
                    Size == input.Size ||
                    Size != null &&
                    Size.Equals(input.Size)
                ) && 
                (
                    Weight == input.Weight ||
                    Weight != null &&
                    Weight.Equals(input.Weight)
                ) && 
                (
                    ProductCategoryId == input.ProductCategoryId ||
                    ProductCategoryId != null &&
                    ProductCategoryId.Equals(input.ProductCategoryId)
                ) && 
                (
                    ProductModelId == input.ProductModelId ||
                    ProductModelId != null &&
                    ProductModelId.Equals(input.ProductModelId)
                ) && 
                (
                    SellStartDate == input.SellStartDate ||
                    SellStartDate != null &&
                    SellStartDate.Equals(input.SellStartDate)
                ) && 
                (
                    SellEndDate == input.SellEndDate ||
                    SellEndDate != null &&
                    SellEndDate.Equals(input.SellEndDate)
                ) && 
                (
                    DiscontinuedDate == input.DiscontinuedDate ||
                    DiscontinuedDate != null &&
                    DiscontinuedDate.Equals(input.DiscontinuedDate)
                ) && 
                (
                    ThumbNailPhoto == input.ThumbNailPhoto ||
                    ThumbNailPhoto != null &&
                    ThumbNailPhoto.Equals(input.ThumbNailPhoto)
                ) && 
                (
                    ThumbnailPhotoFileName == input.ThumbnailPhotoFileName ||
                    ThumbnailPhotoFileName != null &&
                    ThumbnailPhotoFileName.Equals(input.ThumbnailPhotoFileName)
                ) && 
                (
                    Rowguid == input.Rowguid ||
                    Rowguid != null &&
                    Rowguid.Equals(input.Rowguid)
                ) && 
                (
                    ModifiedDate == input.ModifiedDate ||
                    ModifiedDate != null &&
                    ModifiedDate.Equals(input.ModifiedDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                hashCode = hashCode * 59 + ProductId.GetHashCode();
                if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                if (ProductNumber != null)
                    hashCode = hashCode * 59 + ProductNumber.GetHashCode();
                if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                if (StandardCost != null)
                    hashCode = hashCode * 59 + StandardCost.GetHashCode();
                if (ListPrice != null)
                    hashCode = hashCode * 59 + ListPrice.GetHashCode();
                if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                if (Weight != null)
                    hashCode = hashCode * 59 + Weight.GetHashCode();
                if (ProductCategoryId != null)
                    hashCode = hashCode * 59 + ProductCategoryId.GetHashCode();
                if (ProductModelId != null)
                    hashCode = hashCode * 59 + ProductModelId.GetHashCode();
                if (SellStartDate != null)
                    hashCode = hashCode * 59 + SellStartDate.GetHashCode();
                if (SellEndDate != null)
                    hashCode = hashCode * 59 + SellEndDate.GetHashCode();
                if (DiscontinuedDate != null)
                    hashCode = hashCode * 59 + DiscontinuedDate.GetHashCode();
                if (ThumbNailPhoto != null)
                    hashCode = hashCode * 59 + ThumbNailPhoto.GetHashCode();
                if (ThumbnailPhotoFileName != null)
                    hashCode = hashCode * 59 + ThumbnailPhotoFileName.GetHashCode();
                if (Rowguid != null)
                    hashCode = hashCode * 59 + Rowguid.GetHashCode();
                if (ModifiedDate != null)
                    hashCode = hashCode * 59 + ModifiedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
