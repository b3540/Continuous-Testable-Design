/* 
 * AdventureWorksLT
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdventureWorksLT.Service.Client.SwaggerDateConverter;

namespace AdventureWorksLT.Service.Model
{
    /// <summary>
    /// Product
    /// </summary>
    [DataContract]
    public partial class Product :  IEquatable<Product>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Product" /> class.
        /// </summary>
        /// <param name="ProductID">ProductID.</param>
        /// <param name="Name">Name.</param>
        /// <param name="ProductNumber">ProductNumber.</param>
        /// <param name="Color">Color.</param>
        /// <param name="StandardCost">StandardCost.</param>
        /// <param name="ListPrice">ListPrice.</param>
        /// <param name="Size">Size.</param>
        /// <param name="Weight">Weight.</param>
        /// <param name="ProductCategoryID">ProductCategoryID.</param>
        /// <param name="ProductModelID">ProductModelID.</param>
        /// <param name="SellStartDate">SellStartDate.</param>
        /// <param name="SellEndDate">SellEndDate.</param>
        /// <param name="DiscontinuedDate">DiscontinuedDate.</param>
        /// <param name="ThumbNailPhoto">ThumbNailPhoto.</param>
        /// <param name="ThumbnailPhotoFileName">ThumbnailPhotoFileName.</param>
        /// <param name="Rowguid">Rowguid.</param>
        /// <param name="ModifiedDate">ModifiedDate.</param>
        public Product(int? ProductID = default(int?), string Name = default(string), string ProductNumber = default(string), string Color = default(string), double? StandardCost = default(double?), double? ListPrice = default(double?), string Size = default(string), double? Weight = default(double?), int? ProductCategoryID = default(int?), int? ProductModelID = default(int?), DateTime? SellStartDate = default(DateTime?), DateTime? SellEndDate = default(DateTime?), DateTime? DiscontinuedDate = default(DateTime?), byte[] ThumbNailPhoto = default(byte[]), string ThumbnailPhotoFileName = default(string), Guid? Rowguid = default(Guid?), DateTime? ModifiedDate = default(DateTime?))
        {
            this.ProductID = ProductID;
            this.Name = Name;
            this.ProductNumber = ProductNumber;
            this.Color = Color;
            this.StandardCost = StandardCost;
            this.ListPrice = ListPrice;
            this.Size = Size;
            this.Weight = Weight;
            this.ProductCategoryID = ProductCategoryID;
            this.ProductModelID = ProductModelID;
            this.SellStartDate = SellStartDate;
            this.SellEndDate = SellEndDate;
            this.DiscontinuedDate = DiscontinuedDate;
            this.ThumbNailPhoto = ThumbNailPhoto;
            this.ThumbnailPhotoFileName = ThumbnailPhotoFileName;
            this.Rowguid = Rowguid;
            this.ModifiedDate = ModifiedDate;
        }
        
        /// <summary>
        /// Gets or Sets ProductID
        /// </summary>
        [DataMember(Name="ProductID", EmitDefaultValue=false)]
        public int? ProductID { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProductNumber
        /// </summary>
        [DataMember(Name="ProductNumber", EmitDefaultValue=false)]
        public string ProductNumber { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="Color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets StandardCost
        /// </summary>
        [DataMember(Name="StandardCost", EmitDefaultValue=false)]
        public double? StandardCost { get; set; }

        /// <summary>
        /// Gets or Sets ListPrice
        /// </summary>
        [DataMember(Name="ListPrice", EmitDefaultValue=false)]
        public double? ListPrice { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="Size", EmitDefaultValue=false)]
        public string Size { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="Weight", EmitDefaultValue=false)]
        public double? Weight { get; set; }

        /// <summary>
        /// Gets or Sets ProductCategoryID
        /// </summary>
        [DataMember(Name="ProductCategoryID", EmitDefaultValue=false)]
        public int? ProductCategoryID { get; set; }

        /// <summary>
        /// Gets or Sets ProductModelID
        /// </summary>
        [DataMember(Name="ProductModelID", EmitDefaultValue=false)]
        public int? ProductModelID { get; set; }

        /// <summary>
        /// Gets or Sets SellStartDate
        /// </summary>
        [DataMember(Name="SellStartDate", EmitDefaultValue=false)]
        public DateTime? SellStartDate { get; set; }

        /// <summary>
        /// Gets or Sets SellEndDate
        /// </summary>
        [DataMember(Name="SellEndDate", EmitDefaultValue=false)]
        public DateTime? SellEndDate { get; set; }

        /// <summary>
        /// Gets or Sets DiscontinuedDate
        /// </summary>
        [DataMember(Name="DiscontinuedDate", EmitDefaultValue=false)]
        public DateTime? DiscontinuedDate { get; set; }

        /// <summary>
        /// Gets or Sets ThumbNailPhoto
        /// </summary>
        [DataMember(Name="ThumbNailPhoto", EmitDefaultValue=false)]
        public byte[] ThumbNailPhoto { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailPhotoFileName
        /// </summary>
        [DataMember(Name="ThumbnailPhotoFileName", EmitDefaultValue=false)]
        public string ThumbnailPhotoFileName { get; set; }

        /// <summary>
        /// Gets or Sets Rowguid
        /// </summary>
        [DataMember(Name="rowguid", EmitDefaultValue=false)]
        public Guid? Rowguid { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name="ModifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Product {\n");
            sb.Append("  ProductID: ").Append(ProductID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProductNumber: ").Append(ProductNumber).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  StandardCost: ").Append(StandardCost).Append("\n");
            sb.Append("  ListPrice: ").Append(ListPrice).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  ProductCategoryID: ").Append(ProductCategoryID).Append("\n");
            sb.Append("  ProductModelID: ").Append(ProductModelID).Append("\n");
            sb.Append("  SellStartDate: ").Append(SellStartDate).Append("\n");
            sb.Append("  SellEndDate: ").Append(SellEndDate).Append("\n");
            sb.Append("  DiscontinuedDate: ").Append(DiscontinuedDate).Append("\n");
            sb.Append("  ThumbNailPhoto: ").Append(ThumbNailPhoto).Append("\n");
            sb.Append("  ThumbnailPhotoFileName: ").Append(ThumbnailPhotoFileName).Append("\n");
            sb.Append("  Rowguid: ").Append(Rowguid).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Product);
        }

        /// <summary>
        /// Returns true if Product instances are equal
        /// </summary>
        /// <param name="input">Instance of Product to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Product input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProductID == input.ProductID ||
                    (this.ProductID != null &&
                    this.ProductID.Equals(input.ProductID))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProductNumber == input.ProductNumber ||
                    (this.ProductNumber != null &&
                    this.ProductNumber.Equals(input.ProductNumber))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.StandardCost == input.StandardCost ||
                    (this.StandardCost != null &&
                    this.StandardCost.Equals(input.StandardCost))
                ) && 
                (
                    this.ListPrice == input.ListPrice ||
                    (this.ListPrice != null &&
                    this.ListPrice.Equals(input.ListPrice))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.ProductCategoryID == input.ProductCategoryID ||
                    (this.ProductCategoryID != null &&
                    this.ProductCategoryID.Equals(input.ProductCategoryID))
                ) && 
                (
                    this.ProductModelID == input.ProductModelID ||
                    (this.ProductModelID != null &&
                    this.ProductModelID.Equals(input.ProductModelID))
                ) && 
                (
                    this.SellStartDate == input.SellStartDate ||
                    (this.SellStartDate != null &&
                    this.SellStartDate.Equals(input.SellStartDate))
                ) && 
                (
                    this.SellEndDate == input.SellEndDate ||
                    (this.SellEndDate != null &&
                    this.SellEndDate.Equals(input.SellEndDate))
                ) && 
                (
                    this.DiscontinuedDate == input.DiscontinuedDate ||
                    (this.DiscontinuedDate != null &&
                    this.DiscontinuedDate.Equals(input.DiscontinuedDate))
                ) && 
                (
                    this.ThumbNailPhoto == input.ThumbNailPhoto ||
                    (this.ThumbNailPhoto != null &&
                    this.ThumbNailPhoto.Equals(input.ThumbNailPhoto))
                ) && 
                (
                    this.ThumbnailPhotoFileName == input.ThumbnailPhotoFileName ||
                    (this.ThumbnailPhotoFileName != null &&
                    this.ThumbnailPhotoFileName.Equals(input.ThumbnailPhotoFileName))
                ) && 
                (
                    this.Rowguid == input.Rowguid ||
                    (this.Rowguid != null &&
                    this.Rowguid.Equals(input.Rowguid))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProductID != null)
                    hashCode = hashCode * 59 + this.ProductID.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ProductNumber != null)
                    hashCode = hashCode * 59 + this.ProductNumber.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.StandardCost != null)
                    hashCode = hashCode * 59 + this.StandardCost.GetHashCode();
                if (this.ListPrice != null)
                    hashCode = hashCode * 59 + this.ListPrice.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.ProductCategoryID != null)
                    hashCode = hashCode * 59 + this.ProductCategoryID.GetHashCode();
                if (this.ProductModelID != null)
                    hashCode = hashCode * 59 + this.ProductModelID.GetHashCode();
                if (this.SellStartDate != null)
                    hashCode = hashCode * 59 + this.SellStartDate.GetHashCode();
                if (this.SellEndDate != null)
                    hashCode = hashCode * 59 + this.SellEndDate.GetHashCode();
                if (this.DiscontinuedDate != null)
                    hashCode = hashCode * 59 + this.DiscontinuedDate.GetHashCode();
                if (this.ThumbNailPhoto != null)
                    hashCode = hashCode * 59 + this.ThumbNailPhoto.GetHashCode();
                if (this.ThumbnailPhotoFileName != null)
                    hashCode = hashCode * 59 + this.ThumbnailPhotoFileName.GetHashCode();
                if (this.Rowguid != null)
                    hashCode = hashCode * 59 + this.Rowguid.GetHashCode();
                if (this.ModifiedDate != null)
                    hashCode = hashCode * 59 + this.ModifiedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
